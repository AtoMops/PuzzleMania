package resizeImages;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.imgcodecs.Imgcodecs;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.EventHandler;
import javafx.geometry.Rectangle2D;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class ImageViewerClickThrough2 extends Application {

	/*
	 * make ClickThrough a little nicer --> no ugly Buttons etc maybe try to add a
	 * zoom? also we can extend the EventListener to respond to keyboard entries
	 * --> zoom is there but a little rough
	 * also a scroller via keys and mouse-drag would be nice
	 */

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	private double screenFac = 1.15;
	private Rectangle2D screenSize;
	private double width;
	private double height;
	private Pane root; // we need some basic structure
	private Scene scene;

	ImageView imgView;
	List<String> lstFileNames;
	int imgLoadNum; 
	double zoomVal; 
	double xImg;
	double yImg;
	double deltaX;
	double deltaY;
	MatOfByte matOfByte;
	Mat src;

	
	private Parent launchImageResizer() {

		screenSize = Screen.getPrimary().getBounds();
		width = screenSize.getWidth();
		height = screenSize.getHeight();
		// later add screenFac to button/controller to enable custom resize during
		// run-time
//		width /= screenFac;
//		height /= screenFac;

		root = new Pane();
		root.setPrefSize(width, height);
		root.setStyle("-fx-background-color: rgba(255, 255, 255, 0.8);");
		
		lstFileNames = getFileNames("pics/allPros_resized"); // the sampled down images
	//	lstFileNames = getFileNames("pics/allPros"); // the HD images
		// start with random image
		imgLoadNum = getRandomNumberInRange(0, lstFileNames.size()-1);
		zoomVal = 1;
		
		
		imgView = new ImageView();

		loadImage();
	
		root.getChildren().add(imgView);

		/*
		 * to read out all keys available on this machine the lib is: java.lang.reflect.
		 * for Field and Modifier --> but you can also just syso the KeyCode by
		 * "e.getCode()" --> arrow-keys are kind of special for "Scene"
		 */
//		Field[] fields = java.awt.event.KeyEvent.class.getDeclaredFields();
//		for (Field f : fields) {
//		    if (Modifier.isStatic(f.getModifiers())) {
//		        System.out.println(f.getName());
//		    } 
//		}

		resetDrag();

//		addLRButtons();
//		addExitBtn();

		dragImage(); 
		
		return root;

	}

	@Override
	public void start(Stage stage) throws Exception {
		scene = new Scene(launchImageResizer());

//		imgView.fitWidthProperty().bind(stage.widthProperty()); 
//		imgView.fitHeightProperty().bind(stage.heightProperty()); 
		
//		imgView.fitWidthProperty().set(scene.getWidth());
		imgView.fitHeightProperty().set(scene.getHeight());
		imgView.setPreserveRatio(true);
		
		scene.setFill(Color.TRANSPARENT); // !!
		stage.setScene(scene);
		stage.initStyle(StageStyle.UNDECORATED);
		stage.initStyle(StageStyle.TRANSPARENT); // !!
//		stage.setMaximized(true);
		 stage.setFullScreen(true);
		stage.show();

		/*
		 * for KeyEvents we have to work on the "Scene" in JavaFX we can address the
		 * Scene like a node jere is only one ley but of course you can add a
		 * switch-case etc..
		 */
		scene.setOnKeyPressed(e -> {

			/*
			 * the arrow-keys on the small keypad seem to be recruited by the JavaFX scene!
			 * so we have to overwrite this or change the operational modus?!?! the scene
			 * responds to the arrow keys by choosing the buttons lets try Numpad here first
			 * oO' we read out the key-entries here but NO response to arrow-buttons
			 * 
			 */

//			System.out.println(e.getCode());
//			if (e.getCode() == KeyCode.ESCAPE) {
//				System.out.println("closing");
//				// CAUTION! BIG difference between Platfrom.exit and System.Exit !!!
//				Platform.exit(); // closes JavaFX app (but JVM still running)
//				System.exit(0); // closes JVM
//			}

			switch (e.getCode()) {
			case ESCAPE:
//				System.out.println(e.getCode());
//				the command "System.exit(0);" would be enough here..."Platform.exit();" just for training purposes
				Platform.exit(); // closes JavaFX app (but JVM still running)
				System.exit(0); // closes JVM
				break;
			case NUMPAD4:
//				System.out.println(e.getCode());
				callLeftBtnLgc();
				break;
			case NUMPAD6:
//				System.out.println(e.getCode());
				callRighttBtnLgc();
				break;
	/* these are the zoom calls; it is IMPORTANT to address the SCENE via Keys not the Nodes within it
	 * we talk to the Scene not the nodes; Scene is kind of the boss here ^^'  
	 */
			case NUMPAD8:
				zoomIn();
				break;
			case NUMPAD2:
				zoomOut();
				break;
			case NUMPAD5:
				resetZoom();
				break;
			case NUMPAD9:
				resetDrag();
				break;
			case NUMPAD1:
				 stage.setFullScreen(true);
				break;
			case NUMPAD3:
				 stage.setFullScreen(false);
				break;
			default:
				break;
			}

		});
		
		// right-click to reset zoom (same as NUMPAD5)
		scene.setOnMouseClicked(e -> {
            if(e.getButton().equals(MouseButton.SECONDARY)){
           	 resetZoom();
            }
		});

		// there are several ways to shutdown javaFX ; not sure what is the best
//		stage.setOnCloseRequest(e -> Platform.exit());

		// this one closes the app if you close the window
//		stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
//		    @Override
//		    public void handle(WindowEvent t) {
//		        Platform.exit();
//		        System.exit(0);
//		    }
//		});

	}

	public static void main(String[] args) {
		launch(args);
	}
	
	private void loadImage() {

		if (imgLoadNum >= 0 && imgLoadNum < lstFileNames.size()) {
//			System.out.println("loading");
			String srcString = lstFileNames.get(imgLoadNum);
			src = Imgcodecs.imread(srcString);
			// instantiating an empty MatOfByte class
			matOfByte = new MatOfByte();
			// Converting the Mat object to MatOfByte
			Imgcodecs.imencode(".jpg", src, matOfByte);
			// Converting the MatOfByte object to Image and add to current ImageView
			Image imgToAdd = convertByteToImage(matOfByte);
			imgView.setImage(imgToAdd);
		}
	}
	
	// to generate random Integer
	private int getRandomNumberInRange(int min, int max) {
		if (min >= max) {
			throw new IllegalArgumentException("max must be greater than min");
		}
		Random r = new Random();
		return r.nextInt((max - min) + 1) + min;
	}
	
	

	private void addExitBtn() {
		Button eBtn = new Button("close");
		eBtn.setPrefHeight(50);
		eBtn.setPrefWidth(100);
		eBtn.setTranslateX(width - 200);
		eBtn.setTranslateY(100);

		eBtn.addEventHandler(MouseEvent.MOUSE_CLICKED, e -> {
			System.out.println("shutting down");
			Platform.exit();
			System.exit(0);
		});

		eBtn.setOnKeyPressed(e -> {
			if (e.getCode() == KeyCode.ENTER) {
				System.out.println("shutting down");
				Platform.exit();
				System.exit(0);
			}
		});

		root.getChildren().add(eBtn);

	}
	
	private void dragImage() {
	     imgView.setOnMousePressed(e -> {
             xImg = e.getSceneX();
             yImg = e.getSceneY();
             
             // to detect double click (use to reset to standard position)
             if(e.getButton().equals(MouseButton.PRIMARY)){
                 if(e.getClickCount() == 2){
                     System.out.println("Double clicked");
                 	// set to middle of screen
             		resetDrag();
                 }
             }
             
         });
	     imgView.setOnMouseDragged(e -> {
             deltaX = e.getSceneX() - xImg ;
             deltaY = e.getSceneY() - yImg ;
             imgView.setX(imgView.getX() + deltaX);
             imgView.setY(imgView.getY() + deltaY);
             xImg = e.getSceneX() ;
             yImg = e.getSceneY() ;
         });
	}

	private void resetDrag() {
		double imgHeight = imgView.getBoundsInLocal().getHeight();
		double imgWidth = imgView.getBoundsInLocal().getWidth();
		imgView.setX(width / 2 - imgWidth / 2);
		imgView.setY(height / 2 - imgHeight / 2);
	}

	private void zoomIn() {
		zoomVal+=.1;
		imgView.setScaleX(zoomVal);
		imgView.setScaleY(zoomVal);
	}
	
	private void zoomOut() {
		zoomVal-=.1;
		imgView.setScaleX(zoomVal);
		imgView.setScaleY(zoomVal);
	}
	
	private void resetZoom() {
		zoomVal = 1;
		imgView.setScaleX(zoomVal);
		imgView.setScaleY(zoomVal);
	}

	// maybe add something nicer here than Buttons e.g. some Area, circle etc..
	private void addLRButtons() {
		// create Buttons
		Button leftBtn = new Button("scroll left");
		leftBtn.setPrefHeight(50);
		leftBtn.setPrefWidth(100);
		leftBtn.setTranslateX(100);
		leftBtn.setTranslateY(height / 2);

		Button rightBtn = new Button("scroll right");
		rightBtn.setPrefHeight(50);
		rightBtn.setPrefWidth(100);
		rightBtn.setTranslateX(width - 200);
		rightBtn.setTranslateY(height / 2);

		// define EventHandlers

		EventHandler<MouseEvent> eventHandlerBtnLeft = new EventHandler<MouseEvent>() {
			@Override
			public void handle(javafx.scene.input.MouseEvent e) {
				callLeftBtnLgc();
			}
		};

		EventHandler<MouseEvent> eventHandlerBtnRight = new EventHandler<MouseEvent>() {
			@Override
			public void handle(MouseEvent e) {
				callRighttBtnLgc();
			}
		};

		// Adding the EventHandlers to the Btns
		leftBtn.addEventHandler(MouseEvent.MOUSE_CLICKED, eventHandlerBtnLeft);
		rightBtn.addEventHandler(MouseEvent.MOUSE_CLICKED, eventHandlerBtnRight);

		// same logic as above only responding to enter-key
		leftBtn.setOnKeyPressed(e -> {
			if (e.getCode() == KeyCode.ENTER) {
				callLeftBtnLgc();
			}

		});

		rightBtn.setOnKeyPressed(e -> {
			if (e.getCode() == KeyCode.ENTER) {
				callRighttBtnLgc();
			}
		});

		root.getChildren().addAll(leftBtn, rightBtn);
	}

	// exported the btn-response logic
	private void callLeftBtnLgc() {
		imgLoadNum--;
		if (imgLoadNum == -1) {
			imgLoadNum = lstFileNames.size() - 1;
		}
		loadImage();
	}

	private void callRighttBtnLgc() {
		imgLoadNum++;
		if (imgLoadNum == lstFileNames.size()) {
			imgLoadNum = 0;
		}
		loadImage();
	}

	private static List<String> getFileNames(String folderWant) {
		File folder = new File(folderWant);
		File[] listOfFiles = folder.listFiles();
		List<String> fileLst = new ArrayList<String>();

		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				fileLst.add(listOfFiles[i].toString());
			}
		}
		return fileLst;
	}

	private Image convertByteToImage(MatOfByte matOfByte) {
		byte[] byteArray = matOfByte.toArray();
		// Preparing the InputStream object
		InputStream in = new ByteArrayInputStream(byteArray);
		Image image = null;
		// Preparing the BufferedImage
		try {
			BufferedImage bufImage = ImageIO.read(in);
			// better use this (to avoid GDK-Error)
			image = convertToFxImage(bufImage);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return image;
	}

	private static Image convertToFxImage(BufferedImage image) {
		WritableImage wr = null;
		if (image != null) {
			wr = new WritableImage(image.getWidth(), image.getHeight()); // create "matrix"
			PixelWriter pw = wr.getPixelWriter(); // read out each dot via double-loop
			for (int x = 0; x < image.getWidth(); x++) {
				for (int y = 0; y < image.getHeight(); y++) {
					pw.setArgb(x, y, image.getRGB(x, y));
				}
			}
		}
		return new ImageView(wr).getImage();
	}

	public static void saveToFile(Image image) {
		File outputFile = new File("myImage");
		BufferedImage bImage = SwingFXUtils.fromFXImage(image, null);
		try {
			ImageIO.write(bImage, "jpg", outputFile);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

}